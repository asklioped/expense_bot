import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import BOT_TOKEN, tz_name
from manager import ExpenseManager
from categories import CATEGORIES


# –î–æ–¥–∞—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Ç–∞ –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
manager = ExpenseManager()

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—É–º
pending_amounts = {}


# ------------------/start----------------------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç! üëã –¶–µ –±–æ—Ç –¥–ª—è –æ–±–ª—ñ–∫—É –≤–∏—Ç—Ä–∞—Ç.\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /add, —â–æ–± –¥–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É."
    )


# --------------------/today----------------------------
@dp.message(Command("today"))
async def stats_today(message: types.Message):
    user_id = message.from_user.id
    total = manager.get_today_total(user_id)
    await message.answer(f"üìÖ –í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {total:.2f} –≥—Ä–Ω")


#--------------------/week-------------------------------
@dp.message(Command("week"))
async def stats_week(message: types.Message):
    user_id = message.from_user.id
    total = manager.get_week_delta(user_id)
    await message.answer(f"üóìÔ∏è –í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å: {total:.2f} –≥—Ä–Ω")


#-------------------/month--------------------------------------
@dp.message(Command("month"))
async def stats_month(message: types.Message):
    user_id = message.from_user.id
    total = manager.get_month_total(user_id)
    await message.answer(f"üóìÔ∏è –í–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å: {total:.2f} –≥—Ä–Ω")


#--------------------/time--------------------------------------
@dp.message(Command("time"))
async def show_local_time(message: types.Message):
    await message.answer(f"üïë –õ–æ–∫–∞–ª—å–Ω–∏–π —á–∞—Å {manager.local_timestamp_txt(manager.local_timestamp(tz_name))}")        


#--------------------/add-----------------------------------
@dp.message(Command("add"))
async def cmd_add(message: types.Message):
    pending_amounts[message.from_user.id] = None
    await message.answer("–í–≤–µ–¥–∏ —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç–∏ (–ù–∞–ø—Ä–∏–∫–ª–∞–¥ 250):")


#--------------------–æ–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ—ó —Å—É–º–∏-------------
@dp.message()
async def process_amount(message: types.Message):
    user_id = message.from_user.id
    if user_id not in pending_amounts:
        return
    if pending_amounts[user_id] is None:
        try:
            amount = float(message.text.replace(",", "."))
            if amount <= 0:
                await message.answer("üôÖ‚Äç‚ôÄÔ∏è–°—É–º–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –Ω—É–ª—å–≤–æ—é\n–∞–±–æ –º–µ–Ω—à–µ –Ω—É–ª—è\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")
                return
        except ValueError:
            await message.answer("ü§¶‚Äç‚ôÄÔ∏è–°—É–º–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑")
            return
        pending_amounts[user_id] = amount

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=name, callback_data=code)]
                for code, name in CATEGORIES.items()
            ]
        )
        await message.answer(f"–°—É–º–∞ {amount:.2f} –≥—Ä–Ω –ø—Ä–∏–π–Ω—è—Ç–∞ ‚úÖ\n–¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=kb)


# -------------------–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó----------------
@dp.callback_query()
async def process_category(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in pending_amounts or pending_amounts[user_id] is None:
        await callback.answer("–°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥–∏ —Å—É–º—É —á–µ—Ä–µ–∑ /add")
        return
    
    amount = pending_amounts.pop(user_id)
    category_code = callback.data
    manager.add_expense(user_id=user_id, amount=amount, category=category_code)

    await callback.message.edit_text(
        f"‚úÖ –í–∏—Ç—Ä–∞—Ç—É {amount:.2f} –≥—Ä–Ω —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó *{CATEGORIES[category_code]}* –¥–æ–¥–∞–Ω–æ!",
        parse_mode="Markdown"
    )
    await callback.answer()


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())